{"Name":"ZXing.Net.Mobile for Forms","Id":2899,"Alias":"zxing.net.mobile.forms","Description":"ZXing.Net.Mobile for Forms is a C#/.NET library based on the open source Barcode Library: ZXing (Zebra Crossing), using the ZXing.Net Port. It works with Xamarin.iOS, Xamarin.Android, Windows Phone Silverlight, and Windows Universal in Xamarin.Forms apps. \n\nThe goal of ZXing.Net.Mobile is to make scanning barcodes as effortless and painless as possible in your own applications!\n\n\n## Features\n\n- Xamarin.Forms Page and Views\n- Custom Overlays in XAML or C#\n- Xamarin.iOS\n- Xamarin.Android\n- Windows Phone (Silverlight)\n- Windows Universal (UAP 10)\n","Version":"2.1.12","Summary":"ZXing.Net.Mobile is a C#/.NET Barcode Scanning Library for Xamarin.Forms","QuickStart":"# Getting Started\n\nZXing.Net.Mobile for Forms is meant to be used in your Xamarin.Forms apps.  It comes with Forms controls and pages for scanning and displaying barcodes.\n\nIf you are looking for barcode scanning functionality in your non-Forms Xamarin / Windows apps, check out the original [ZXing.Net.Mobile Component](https://components.xamarin.com/view/zxing.net.mobile).\n\n# Usage\n\nThe easiest way to use scanner is to create an instance of the `ZXingScannerPage`: \n\n```csharp\nvar scanPage = new ZXingScannerPage ();\n\nscanPage.OnScanResult += (result) =\u003e {\n\t// Stop scanning\n    scanPage.IsScanning = false;\n\n\t// Pop the page and show the result\n    Device.BeginInvokeOnMainThread (() =\u003e {\n        Navigation.PopAsync ();        \n        DisplayAlert(\"Scanned Barcode\", result.Text, \"OK\");\n    });\n};\n\n// Navigate to our scanner page\nawait Navigation.PushAsync (scanPage);\n```\n\n\n## Additional Setup Required\n\nFor each platform there is some additional setup required:\n\n### Android \n\nOn Android, in your main `Activity`\u0027s `OnCreate (..)` implementation, call:\n\n```csharp\nZXing.Net.Mobile.Forms.Android.Platform.Init();\n```\n\nZXing.Net.Mobile for Xamarin.Forms also handles the new Android permission request model for you, but you will need to add the following override implementation to your main `Activity` as well:\n\n```csharp\npublic override void OnRequestPermissionsResult(int requestCode, string[] permissions, Permission[] grantResults)\n{\n    global::ZXing.Net.Mobile.Forms.Android.PermissionsHandler.OnRequestPermissionsResult (requestCode, permissions, grantResults);           \n}\n```\n\nThe `Camera` permission should be automatically included for you in the `AndroidManifest.xml` however if you would like to use the Torch API\u0027s you will still need to add the `Flashlight` permission yourself.  You can do this by using the following assembly level attribute:\n\n```csharp\n[assembly: UsesPermission (Android.Manifest.Permission.Flashlight)]\n```\n\n### iOS\n\nIn your `AppDelegate`\u0027s `FinishedLaunching (..)` implementation, call:\n\n```csharp\nZXing.Net.Mobile.Forms.Android.Platform.Init();\n```\n\n\n### Windows Phone\nIn your main `Page`\u0027s constructor, you should add:\n\n```csharp\nZXing.Net.Mobile.Forms.WindowsPhone.ZXingScannerViewRenderer.Init();\n```\n\n### Windows Universal UWP\n\nIn your main `Page`\u0027s constructor, you should add:\n\n```csharp\nZXing.Net.Mobile.Forms.WindowsUniversal.ZXingScannerViewRenderer.Init();\n```\n\n\n\n# Scanning in a View\n\nIf you need more customization, or do not want the scanner to take up its own Page, you can also use the `ZXingScannerView` in your own custom page:\n\n```csharp\nusing Xamarin.Forms;\nusing ZXing.Net.Mobile.Forms;\n\nnamespace FormsSample\n{\n    public class CustomScanPage : ContentPage\n    {\n        ZXingScannerView zxing;\n        ZXingDefaultOverlay overlay;\n\n        public CustomScanPage () : base ()\n        {\n            zxing = new ZXingScannerView\n            {\n                HorizontalOptions = LayoutOptions.FillAndExpand,\n                VerticalOptions = LayoutOptions.FillAndExpand\n            };\n            zxing.OnScanResult += (result) =\u003e \n                Device.BeginInvokeOnMainThread (async () =\u003e {\n\n                    // Stop analysis until we navigate away so we don\u0027t keep reading barcodes\n                    zxing.IsAnalyzing = false;\n\n                    // Show an alert\n                    await DisplayAlert (\"Scanned Barcode\", result.Text, \"OK\");\n\n                    // Navigate away\n                    await Navigation.PopAsync ();\n                });\n\n            overlay = new ZXingDefaultOverlay\n            {\n                TopText = \"Hold your phone up to the barcode\",\n                BottomText = \"Scanning will happen automatically\",\n                ShowFlashButton = zxing.HasTorch,\n            };\n            overlay.FlashButtonClicked += (sender, e) =\u003e {\n                zxing.IsTorchOn = !zxing.IsTorchOn;\n            };\n            var grid = new Grid\n            {\n                VerticalOptions = LayoutOptions.FillAndExpand,\n                HorizontalOptions = LayoutOptions.FillAndExpand,\n            };\n            grid.Children.Add(zxing);\n            grid.Children.Add(overlay);\n\n            // The root page of your application\n            Content = grid;\n        }\n\n        protected override void OnAppearing()\n        {\n            base.OnAppearing();\n\n            zxing.IsScanning = true;\n        }\n\n        protected override void OnDisappearing()\n        {\n            zxing.IsScanning = false;\n\n            base.OnDisappearing();\n        }\n    }\n}\n```\n\n\n##Custom Overlays\n\nIt\u0027s very simple to use a custom overlay.  If you are using the `ZXingScannerPage` you can pass in any `View` for the `customOverlay` parameter in the constructor.\n\n```csharp\n// Create our custom overlay\nvar customOverlay = new StackLayout {\n    HorizontalOptions = LayoutOptions.FillAndExpand,\n    VerticalOptions = LayoutOptions.FillAndExpand\n};\nvar torch = new Button {\n    Text = \"Toggle Torch\"\n};\ntorch.Clicked += delegate {\n    scanPage.ToggleTorch ();\n};\ncustomOverlay.Children.Add (torch);\n\n// Pass in the custom overlay\nscanPage = new ZXingScannerPage (customOverlay: customOverlay);\nscanPage.OnScanResult += (result) =\u003e {\n    scanPage.IsScanning = false;\n\n    Device.BeginInvokeOnMainThread(() =\u003e\n    {\n        Navigation.PopAsync();\n        DisplayAlert(\"Scanned Barcode\", result.Text, \"OK\");\n    });\n};\nawait Navigation.PushAsync (scanPage);\n```\n\nIf you are using `ZXingScannerView` on your own page, of course you are responsible for adding your own overlay.\n\n\n## Barcode Formats\n\nBy default, all barcode formats are monitored while scanning.  You can change which formats to check for by passing a `MobileBarcodeScanningOptions` instance into the `ZXingScannerPage`\u0027s constructor.\n\n```csharp\nvar options = new ZXing.Mobile.MobileBarcodeScanningOptions();\noptions.PossibleFormats = new List\u003cZXing.BarcodeFormat\u003e() { \n  ZXing.BarcodeFormat.Ean8, ZXing.BarcodeFormat.Ean13 \n};\n\nvar scanPage = new ZXingScannerPage (options);\n\n// ...\n```\n\nYou can also set the `Options` property if you are using the `ZXingScannerView` control directly.\n\n\n## Displaying / Generating Barcodes\n\nThere is also a `ZXingBarcodeImageView` control available that can be used within any Xamarin.Forms page:\n\n```csharp\npublic class BarcodePage : ContentPage\n{\n    ZXingBarcodeImageView barcode;\n\n    public BarcodePage ()\n    {\n        barcode = new ZXingBarcodeImageView {\n            HorizontalOptions = LayoutOptions.FillAndExpand,\n            VerticalOptions = LayoutOptions.FillAndExpand,                   \n        };\n        barcode.BarcodeFormat = ZXing.BarcodeFormat.QR_CODE;\n        barcode.BarcodeOptions.Width = 300;\n        barcode.BarcodeOptions.Height = 300;\n        barcode.BarcodeOptions.Margin = 10;\n        barcode.BarcodeValue = \"ZXing.Net.Mobile\";\n\n        Content = barcode;\n    }\n}\n```\n","Hash":"f2459e13d69ad9fb706d75347b76b52e","TargetPlatforms":["ios","ios-unified","android"],"TrialHash":null}